{"version":3,"sources":["features/list/SearchBar.module.css","features/details/Details.module.css","components/loader/Loader.module.css","features/list/NoResult.module.css","features/list/List.module.css","app/App.module.css","api/client.ts","components/loader/Loader.tsx","features/list/SearchBar.tsx","features/list/Gif.tsx","features/list/NoResult.tsx","features/list/utils.ts","features/list/slice.ts","features/list/List.tsx","features/details/Details.tsx","components/scrollTop/ScrollTop.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","apiClient","apikey","baseUrl","this","path","queryParams","url","URL","Object","entries","key","value","searchParams","append","toString","offset","limit","buildUrl","rating","fetch","resp","json","data","q","id","Loader","props","className","styles","loader","SearchBar","width","defaultValue","onSubmit","element","useRef","useState","isSticky","setSticky","queryText","setQueryText","stickyClass","sticky","container","containerStyle","inputStyle","paddingRight","paddingLeft","handleScroll","current","shouldSticky","window","scrollY","getBoundingClientRect","bottom","useEffect","addEventListener","passive","removeEventListener","ref","style","event","preventDefault","type","placeholder","onChange","e","newQueryText","target","Gif","title","height","x","y","position","transform","background","to","src","alt","NoResult","getQueryParam","search","URLSearchParams","get","compareTrendingDatetime","a","b","trending_datetime","getGifHeight","currentWidth","targetWidth","currentHeight","ratio","Math","floor","buildPayload","payload","fetchGifById","createAsyncThunk","fetchGifs","fetchTrending","listSlice","createSlice","name","initialState","gifs","byId","pagination","totalCount","loading","reducers","clearGifs","state","extraReducers","builder","addCase","fulfilled","action","gif","pending","total_count","forEach","actions","selectGifs","values","list","selectTotalCount","selectLoading","List","numCols","gutter","pageSize","history","useHistory","location","useLocation","dispatch","useDispatch","queryFromUrl","useSelector","sort","useMemo","totalWidth","gifWidth","cols","Array","fill","children","map","images","fixed_width","gifHeight","parseInt","colIdx","indexOf","min","childProps","maxHeight","max","createChildren","shouldShowChildren","length","gridStyle","handleScrollCb","useCallback","innerHeight","document","body","offsetHeight","query","push","pathname","grid","Details","selectGifById","marginTop","original","ScrollTop","setTimeout","scrollTo","App","app","exact","render","match","params","store","configureStore","reducer","listReducer","Boolean","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d8b14c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchBar_container__2opyN\",\"sticky\":\"SearchBar_sticky__1v4gV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Details_container__2IOJU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__1uQi3\",\"loader1\":\"Loader_loader1__1DRXO\",\"loader2\":\"Loader_loader2__3I8A0\",\"loader3\":\"Loader_loader3__6XFpi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NoResult_container__1MQ8S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"List_grid__2pV7n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3fr4t\"};","\ninterface IImageDetail {\n  url: string\n  width: string\n  height: string\n}\n\nexport interface IGif {\n  id: string\n  title: string\n  trending_datetime: string\n  images: {\n    original: IImageDetail\n    fixed_width: IImageDetail\n  }\n}\n\nexport interface IListResult {\n  meta: {\n      msg: string\n      response_id: string\n      status: number\n  }\n  pagination: {\n      count: number\n      total_count: number\n      offset: number\n  }\n  data: IGif[]\n}\n\ninterface IQueryParams {\n  q?: string\n  offset?: number\n  limit?: number\n  rating?: string\n}\n\nexport default class APIClient {\n  baseUrl: string\n  apikey: string\n\n  constructor(apikey: string) {\n    this.baseUrl = 'https://api.giphy.com/v1/gifs'\n    this.apikey = apikey\n  }\n\n  buildUrl(path: string, queryParams: IQueryParams = {}) {\n    const url = new URL(`${this.baseUrl}/${path}`)\n    for (const [key, value] of Object.entries(queryParams)) {\n      url.searchParams.append(key, value)\n    }\n    url.searchParams.append('api_key', this.apikey)\n\n    return url.toString()\n  }\n\n  async fetchTrending(offset: number, limit: number): Promise<IListResult> {\n    const url = this.buildUrl('trending', {\n      offset,\n      limit,\n      rating: 'g'\n    })\n    const resp = await fetch(url)\n    const data = await resp.json()\n\n    return data\n  }\n\n  async fetchGifs(q: string, offset: number, limit: number): Promise<IListResult> {\n    const url = this.buildUrl('search', {\n      q,\n      offset,\n      limit,\n      rating: 'g'\n    })\n    const resp = await fetch(url)\n    const data = await resp.json()\n\n    return data\n  }\n\n  async fetchGifById(id: string): Promise<IGif> {\n    const url = this.buildUrl(id)\n    const resp = await fetch(url)\n    const data = await resp.json()\n\n    return data.data\n  }\n}\n\nexport const apiClient = new APIClient('')\n","import React from 'react'\nimport styles from './Loader.module.css'\n\ninterface ILoaderProps {\n  [key: string]: any\n}\n\nfunction Loader(props: ILoaderProps) {\n  return (\n    <div className={styles.loader} {...props}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  )\n}\n\nexport default Loader","import React, { useEffect, useState, useRef, SyntheticEvent } from 'react'\n\nimport styles from './SearchBar.module.css'\n\ninterface ISearchBarProps {\n  width: number\n  defaultValue: string | null\n  onSubmit: (queryText: string) => void\n}\n\nfunction SearchBar(props: ISearchBarProps) {\n  const { width, defaultValue, onSubmit } = props\n  const element = useRef<HTMLDivElement>(null)\n  const [isSticky, setSticky] = useState(false)\n  const [queryText, setQueryText] = useState(defaultValue || '')\n  const stickyClass = isSticky ? styles.sticky : ''\n  const className = `${styles.container} ${stickyClass}`\n  const containerStyle = { width }\n  const paddingRight = 10\n  const paddingLeft = 38\n  const inputStyle = {\n    paddingRight,\n    paddingLeft,\n    width: width - paddingLeft - paddingRight\n  }\n\n  const handleChange = (e: SyntheticEvent) => {\n    const newQueryText = (e.target as HTMLInputElement).value\n    setQueryText(newQueryText)\n  }\n\n  const handleSubmit = (event: SyntheticEvent) => {\n    event.preventDefault()\n    onSubmit(queryText)\n  }\n\n  const handleScroll = () => {\n    if (element.current) {\n      const shouldSticky = window.scrollY > element.current.getBoundingClientRect().bottom\n      shouldSticky ? setSticky(true) : setSticky(false)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll, { passive: true })\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  useEffect(() => {\n    setQueryText(defaultValue || '')\n  }, [defaultValue])\n\n  return (\n    <div ref={element} className={className} style={containerStyle}>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <i className=\"material-icons\">search</i>\n        </label>\n        <input\n          type=\"text\"\n          placeholder=\"Search GIFs...\"\n          value={queryText}\n          onChange={handleChange}\n          style={inputStyle}\n        />\n      </form>\n    </div>\n  )\n}\n\nexport default SearchBar\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\ninterface IGifProps {\n  id: string\n  url: string\n  title: string\n  width: number\n  height: number\n  x: number\n  y: number\n}\n\nexport default function Gif(props: IGifProps) {\n  const { id, url, title, width, height, x, y } = props\n  const style = {\n    position: 'absolute' as 'absolute',\n    transform: `translate3d(${x}px, ${y}px, 0px)`,\n    background: 'rgb(0, 255, 153)',\n    width,\n    height\n  }\n\n  return (\n    <Link to={`/${id}`} style={style}>\n        <div style={{width, height}}>\n          <picture>\n            <img\n              src={url}\n              width={width}\n              height={height}\n              alt={title}\n            />\n          </picture>\n        </div>\n    </Link>\n  )\n}\n","import React from 'react'\n\nimport styles from './NoResult.module.css'\n\nfunction NoResult() {\n    return (\n        <div className={styles.container}>\n            <h3>No GIFs found</h3>\n        </div>\n    )\n}\n\nexport default NoResult","import { IFetchPayload } from './slice'\n\ninterface ICompared {\n  trending_datetime: string\n}\n\nexport const getQueryParam = (search: string, key: string) => {\n  const queryParams = new URLSearchParams(search)\n  return queryParams.get(key)\n}\n\nexport const compareTrendingDatetime = (a: ICompared, b: ICompared) => {\n  if (a.trending_datetime > b.trending_datetime) {\n    return -1\n  } else if (a.trending_datetime === b.trending_datetime) {\n    return 0\n  } else {\n    return 1\n  }\n}\n\nexport const getGifHeight = (currentWidth: number, targetWidth: number, currentHeight: number) => {\n  const ratio = targetWidth / currentWidth\n  return Math.floor(currentHeight * ratio)\n}\n\nexport const buildPayload = (q: string | null, limit: number, offset = 0) => {\n  const payload: IFetchPayload = {\n    offset, \n    limit\n  }\n  if (q) {\n    payload.q = q\n  }\n\n  return payload\n}\n\nconst utils = {\n  getQueryParam,\n  compareTrendingDatetime,\n  getGifHeight,\n  buildPayload\n}\n\nexport default utils","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { apiClient, IGif } from '../../api/client'\nimport { IRootState } from '../../app/store'\n\nexport interface IFetchPayload {\n  q?: string\n  offset: number\n  limit: number\n}\n\ninterface IListState {\n  gifs: {\n    byId: {\n      [key: string]: IGif\n    }\n  }\n  pagination: {\n    totalCount: number\n  }\n  loading: 'idle' | 'pending'\n}\n\nconst initialState: IListState = {\n  gifs: {\n    byId: {}\n  },\n  pagination: {\n    totalCount: 0\n  },\n  loading: 'idle'\n}\n\nexport const fetchGifById = createAsyncThunk(\n  'gifs/fetchById',\n  async (id: string) => {\n    return await apiClient.fetchGifById(id)\n  }\n)\n\nexport const fetchGifs = createAsyncThunk(\n  'gifs/fetchGifs',\n  async (payload: IFetchPayload) => {\n    const {q, offset, limit } = payload\n    if (q) {\n      return await apiClient.fetchGifs(q, offset, limit)\n    }\n    return await apiClient.fetchTrending(offset, limit)\n  }\n)\n\nexport const listSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    clearGifs(state: IListState) {\n      state.gifs = {\n        byId: {}\n      }\n      state.pagination = {\n        totalCount: 0\n      }\n      state.loading = 'idle'\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchGifById.fulfilled, (state: IListState, action) => {\n      const gif = action.payload\n      state.gifs.byId[gif.id] = gif\n    })\n    builder.addCase(fetchGifs.pending, (state: IListState) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    })\n    builder.addCase(fetchGifs.fulfilled, (state: IListState, action) => {\n      if (state.loading === 'pending') {\n        const { data, pagination: { total_count } } = action.payload\n\n        data.forEach((gif) => {\n          state.gifs.byId[gif.id] = gif\n        })\n        state.pagination.totalCount = total_count\n        state.loading = 'idle'\n      }\n    })\n  }\n})\n\nexport const { clearGifs } = listSlice.actions\n\nexport const selectGifs = (state: IRootState) => Object.values(state.list.gifs.byId)\nexport const selectGifById = (state: IRootState, id: string) => state.list.gifs.byId[id]\nexport const selectTotalCount = (state: IRootState) => state.list.pagination.totalCount\nexport const selectLoading = (state: IRootState) => state.list.loading\n\nexport default listSlice.reducer\n","import React, { useCallback, useEffect, useRef, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport Loader from '../../components/loader/Loader'\nimport SearchBar from './SearchBar'\nimport Gif from './Gif'\nimport NoResult from './NoResult'\nimport { IGif } from '../../api/client'\nimport {\n  getQueryParam,\n  compareTrendingDatetime,\n  getGifHeight,\n  buildPayload\n} from './utils'\nimport {\n  selectTotalCount,\n  selectGifs,\n  selectLoading,\n  clearGifs,\n  fetchGifs\n} from './slice'\nimport styles from './List.module.css'\n\ninterface IListProps {\n  numCols: number\n  gutter: number\n  width: number\n  pageSize: number\n}\n\nexport const createChildren = (gifs: IGif[], numCols: number, gutter: number, totalWidth: number) => {\n  const gifWidth = Math.floor((totalWidth - gutter * (numCols - 1)) / numCols)\n  const cols = Array(numCols).fill(0)\n  const children = gifs.map(gif => {\n    const { id, title, images: { fixed_width: { width, height, url } } } = gif\n    const gifHeight = getGifHeight(parseInt(width), gifWidth, parseInt(height))\n    const colIdx = cols.indexOf(Math.min(...cols))\n    const x = colIdx * (gifWidth + gutter)\n    const y = cols[colIdx]\n    const childProps = {\n      id,\n      url,\n      title,\n      x,\n      y,\n      width: gifWidth,\n      height: gifHeight,\n    }\n\n    cols[colIdx] += (gifHeight + gutter)\n\n    return <Gif key={id} {...childProps} />\n  })\n  const maxHeight = Math.max(...cols)\n\n  return {\n    maxHeight,\n    children\n  }\n}\n\nfunction List(props: IListProps) {\n  const { numCols, gutter, width, pageSize } = props\n  const history = useHistory()\n  const location = useLocation()\n  const dispatch = useDispatch()\n  const element = useRef(null)\n  const queryFromUrl = getQueryParam(location.search, 'q')\n  const loading = useSelector(selectLoading)\n  const totalCount = useSelector(selectTotalCount)\n  const gifs = useSelector(selectGifs).sort(compareTrendingDatetime)\n  const { maxHeight, children } = useMemo(\n    () => createChildren(gifs, numCols, gutter, width),\n    [gifs, numCols, gutter, width]\n  )\n  const shouldShowChildren = children.length >= pageSize\n  const gridStyle = {\n    width: width,\n    height: maxHeight\n  }\n  const handleScroll = () => {\n    const atBottom = (window.innerHeight + window.scrollY) >= document.body.offsetHeight\n    if (atBottom && gifs.length < totalCount && loading === 'idle') {\n      const payload = buildPayload(queryFromUrl, pageSize, gifs.length)\n      dispatch(fetchGifs(payload))\n    }\n  }\n  const handleScrollCb = useCallback(handleScroll, [dispatch, pageSize, queryFromUrl, loading, totalCount, gifs.length])\n  const handleSearchSubmit = (query: string | null) => {\n    if (!query) {\n      history.push({\n        pathname: '/'\n      })\n      return\n    }\n\n    history.push({\n      pathname: '/search',\n      search: `?q=${query}`\n    })\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScrollCb, { passive: true });\n    return () => {\n        window.removeEventListener('scroll', handleScrollCb);\n    }\n  }, [handleScrollCb])\n\n  useEffect(() => {\n    if (loading === 'idle') {\n      dispatch(clearGifs())\n      const payload = buildPayload(queryFromUrl, pageSize)\n      dispatch(fetchGifs(payload))\n    }\n  }, [dispatch, pageSize, queryFromUrl])\n\n  return (\n    <div>\n      <SearchBar width={width} defaultValue={queryFromUrl} onSubmit={handleSearchSubmit} />\n      <div ref={element} className={styles.grid} style={gridStyle}>\n        { shouldShowChildren && children}\n        { (!shouldShowChildren && loading !== 'pending') && <NoResult />}\n      </div>\n      { loading === 'pending' && <Loader />}\n    </div>\n  )\n}\n\nexport default List\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Loader from '../../components/loader/Loader'\nimport { selectGifById, fetchGifById } from '../list/slice'\nimport { IRootState } from '../../app/store'\nimport styles from './Details.module.css'\n\ninterface IDetailsProps {\n  id: string\n}\n\nfunction Details(props: IDetailsProps) {\n  const { id } = props\n  const dispatch = useDispatch()\n  const gif = useSelector((state: IRootState) => selectGifById(state, id))\n\n  useEffect(() => {\n    if (!gif) {\n      dispatch(fetchGifById(id))\n    }\n  }, [dispatch, gif, id])\n\n  if (!gif) {\n    return (\n      <div className={styles.container}>\n        <Loader style={{marginTop: 100}}/>\n      </div>\n    )\n  }\n\n  const { title, images: { original: { url, width, height } }} = gif\n  const containerStyle = {\n    width,\n    height\n  }\n\n  return (\n    <div>\n      <div className={styles.container} style={containerStyle}>\n        <picture>\n          <img\n            src={url}\n            width={width}\n            height={height}\n            alt={title}\n          />\n        </picture>\n        <p>{title}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Details\n","import { useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport default function ScrollTop() {\n  const { pathname } = useLocation()\n\n  useEffect(() => {\n    setTimeout(() => {\n      window.scrollTo(0, 0)\n    }, 50)\n  }, [pathname])\n\n  return null\n}\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom'\r\n\r\nimport List from '../features/list/List'\r\nimport Details from '../features/details/Details'\r\nimport ScrollTop from '../components/scrollTop/ScrollTop'\r\nimport styles from './App.module.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <ScrollTop />\r\n      <div className={styles.app}>\r\n        <Switch>\r\n          <Route exact path={['/', '/search']}>\r\n            <section>\r\n              <List numCols={4} gutter={16} width={1040} pageSize={35} />\r\n            </section>\r\n          </Route>\r\n          <Route path=\"/:id\" render={({ match }) => {\r\n            return (\r\n              <section>\r\n                <Details id={match.params.id}/>\r\n              </section>\r\n            )\r\n          }} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport listReducer from '../features/list/slice'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    list: listReducer,\r\n  },\r\n})\r\n\r\nexport type IRootState = ReturnType<typeof store.getState>\r\n\r\nexport default store","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport { apiClient } from './api/client'\r\nimport App from './app/App'\r\nimport store from './app/store'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport './index.css'\r\n\r\napiClient.apikey = 'g8FtLBjCNKzd6HuDEfNOOqrxlv9pCSx0'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}